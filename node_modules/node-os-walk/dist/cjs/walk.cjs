"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/walk.ts
var walk_exports = {};
__export(walk_exports, {
  walk: () => walk
});
module.exports = __toCommonJS(walk_exports);
var import_path = __toESM(require("path"));
var import_read_dir = require("./read-dir.cjs");
async function* walk(root, options = {}) {
  var _a, _b;
  (_a = options.followSymlinks) != null ? _a : options.followSymlinks = false;
  (_b = options.ignoreErrors) != null ? _b : options.ignoreErrors = false;
  const result = await (0, import_read_dir.readDir)(root, options.ignoreErrors);
  yield result;
  const [currentRoot, subDirectories] = result;
  for (const directory of subDirectories) {
    if (!options.followSymlinks && directory.isSymbolicLink())
      continue;
    const subDirPath = import_path.default.resolve(currentRoot, directory.name);
    for await (const result2 of walk(subDirPath, options)) {
      yield result2;
    }
  }
}
